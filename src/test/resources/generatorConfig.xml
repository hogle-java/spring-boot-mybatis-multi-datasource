<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- propertis 配置文件 -->
    <properties resource="application.properties" />

    <!-- MBG根配置 -->
    <context id="ToDo" targetRuntime="MyBatis3" defaultModelType="conditional">

        <!-- 生成hashCode()和equals()方法的插件 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />

        <!-- bean类序列化插件 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- sql like 查询是否区分大小写插件 -->
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />

        <!-- 生成toString() 方法插件 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

        <!-- 重命名Bean查询条件类的类名，默认命名Example -->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$" />
            <property name="replaceString" value="Param" />
        </plugin>

        <!-- *******************************下面的插件都是自定义插件******************************* -->
        <!-- add an extra selectOneByExample method into mapper class -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.selectone.MapperAddSelectOneByExamplePlugin">
            <property name="methodName" value="getOneByExample"/>
        </plugin>

        <!-- add an extra batchInsert method into mapper class -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.batch.MySqlBatchInsertPlugin">
            <property name="methodName" value="batchInsert"/>
        </plugin>

        <!-- Pagination plugin. -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.PaginationPlugin"/>

        <!-- Extra DAO interface. -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.DAOPlugin">
            <property name="typeName" value="DAO"/>
        </plugin>

        <!-- 生成的注释配置，不输入注释中的时间 -->
        <commentGenerator>
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <!-- 数据库连接信息 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}" connectionURL="${mbg.datasource.url.todo}"
                        userId="${spring.datasource.username}" password="${spring.datasource.password}">
        </jdbcConnection>

        <!-- Java 生成的bean中字段类型配置 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- java 生成Bean类的配置 -->
        <javaModelGenerator targetPackage="${mbg.modelPackage}"
                            targetProject="${mbg.targetProject}" />

        <!-- java 生成 mapper类的配置 -->
        <javaClientGenerator type="ANNOTATEDMAPPER"
                             targetPackage="${mbg.javaClientPackage}" targetProject="${mbg.targetProject}">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 配置需要自动生成的表，可配置多个table标签 -->
        <table tableName="table_to_do" domainObjectName="ToDo" >

            <!-- 数据库的 schema 可以认为是数据库的名称 -->
            <property name="runtimeSchema" value="todo"/>

            <!-- 生成的business文件名称,不配置，则不会生成business  -->
            <property name="generatedBusinessName" value="ToDoBusiness"/>

            <!-- 是否生成自增长主键 -->
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
    </context>




    <!-- MBG根配置 -->
    <context id="demo" targetRuntime="MyBatis3" defaultModelType="conditional">

        <!-- 生成hashCode()和equals()方法的插件 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />

        <!-- bean类序列化插件 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- sql like 查询是否区分大小写插件 -->
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />

        <!-- 生成toString() 方法插件 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

        <!-- 重命名Bean查询条件类的类名，默认命名Example -->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$" />
            <property name="replaceString" value="Param" />
        </plugin>

        <!-- *******************************下面的插件都是自定义插件******************************* -->
        <!-- add an extra selectOneByExample method into mapper class -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.selectone.MapperAddSelectOneByExamplePlugin">
            <property name="methodName" value="getOneByExample"/>
        </plugin>

        <!-- add an extra batchInsert method into mapper class -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.batch.MySqlBatchInsertPlugin">
            <property name="methodName" value="batchInsert"/>
        </plugin>

        <!-- Pagination plugin. -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.PaginationPlugin"/>

        <!-- Extra DAO interface. -->
        <plugin type="com.github.yuanmomo.mybatis.mbg.plugin.DAOPlugin">
            <property name="typeName" value="DAO"/>
        </plugin>

        <!-- 生成的注释配置，不输入注释中的时间 -->
        <commentGenerator>
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <!-- 数据库连接信息 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}" connectionURL="${mbg.datasource.url.demo}"
                        userId="${spring.datasource.username}" password="${spring.datasource.password}">
        </jdbcConnection>

        <!-- Java 生成的bean中字段类型配置 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- java 生成Bean类的配置 -->
        <javaModelGenerator targetPackage="${mbg.modelPackage}"
                            targetProject="${mbg.targetProject}" />

        <!-- java 生成 mapper类的配置 -->
        <javaClientGenerator type="ANNOTATEDMAPPER"
                             targetPackage="${mbg.javaClientPackage}" targetProject="${mbg.targetProject}">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 配置需要自动生成的表，可配置多个table标签 -->
        <table tableName="table_demo" domainObjectName="Demo" >

            <!-- 数据库的 schema 可以认为是数据库的名称 -->
            <property name="runtimeSchema" value="demo"/>

            <!-- 生成的business文件名称,不配置，则不会生成business  -->
            <property name="generatedBusinessName" value="DemoBusiness"/>

            <!-- 是否生成自增长主键 -->
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>